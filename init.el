;;; init.el -- Emacs initialization.
;;; -*- lexical-binding: t; -*-

;;; Commentary:
;;; it determines if it has to transpile README.org or just load it.
;;; Credit goes to:
;;; - https://lists.gnu.org/archive/html/emacs-orgmode/2010-09/msg00808.html
;;;   which helped me understand that I needed to transpile the org file for the INCLUDE
;;;   statements to work.
;;; - http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/
;;;   which allowed me to tangle efficiently the code blocks.

;;; Code:
(let
    (
        (file-org (expand-file-name (concat user-emacs-directory "README.org")))
        (file-el  (expand-file-name (concat user-emacs-directory "README.el")))
    )
    (if
        (and
            (file-exists-p file-el)
            (not (file-newer-than-file-p file-org file-el))
        )
        ;; if the "transpiled" init exist and has the latest changes, load it.
        (load-file file-el)
        ;; Transpile orgfile and then load it.
        (save-window-excursion (let*
            (
                (gc-cons-threshold most-positive-fixnum); disable GC while running this
                (org-babel-src-block-regexp (concat
                    ;; (1) indentation                 (2) lang
                    "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
                    ;; (3) switches
                    "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
                    ;; (4) header arguments
                    "\\([^\n]*\\)\n"
                    ;; (5) body
                    "\\([^\000]*?\n\\)??[ \t]*#\\+end_src"
                ))
                (contents ())
            )
            (require 'org)
            (with-temp-buffer
                (insert-file-contents file-org)
                (org-org-export-as-org)
                (goto-char (point-min))
                (while (re-search-forward org-babel-src-block-regexp nil t)
                    (let
                        (
                            (lang (match-string 2))
                            (args (match-string 4))
                            (body (match-string 5))
                        )
                        (when
                            (and (string= lang "emacs-lisp")
                                (not (string-match-p ":tangle\\s-+no" args))
                            )
                            (add-to-list 'contents body)
                        )
                    )
                )
            )
            (kill-buffer "*Org ORG Export*")
            (with-temp-file file-el
                (insert (format ";;; AUTOGENERATED FILE\n;;; Edit %s instead.\n\n" file-org))
                (apply 'insert (reverse contents))
            )
            (message "> TRANSPILED %s ..." file-el)
            (load-file file-el)
        ))
    )
)

(provide 'init)
;;; init.el ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
	(delight quelpa-use-package use-package bind-key quelpa))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
