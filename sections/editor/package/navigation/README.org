* Navigation Helpers
These packages improve navigation within the editor and its parts.

** Dired Plus
Extends upon bundled [[https://github.com/emacs-mirror/emacs/blob/master/lisp/dired.el][dired.el]] and adds more functionality.
#+BEGIN_SRC emacs-lisp
  (let
      (;; local variable declarations
          (_init (lambda ()
              ;; Setup the key which will allow us to trigger dired mode
              (add-hook 'evil-leader-mode-hook '(lambda ()
                  (evil-leader/set-key "." 'dired-jump)
              ))
          ))
          (_conf (lambda ()
              ;; Improve default dired functionality
              (use-package dired-x :demand t)
              ;; When evil mode is available cerate a new key-map specially for dired-mode
              (add-hook 'evil-local-mode-hook '(lambda ()
                  (evil-make-overriding-map dired-mode-map 'normal t); the standard bindings
                  (evil-define-key 'normal dired-mode-map
                      "gg" 'evil-goto-first-line
                      "G" 'evil-goto-line
                      "h" 'evil-backward-char
                      "j" 'evil-next-line
                      "k" 'evil-previous-line
                      "l" 'evil-forward-char
                      "w" 'evil-forward-word-begin
                      "b" 'evil-backward-word-begin
                      "e" 'evil-forward-WORD-end
                  )
              ))
              ;; Reuse the dired buffer when moving between directories
              (diredp-toggle-find-file-reuse-dir 1)
          ))
      )
      ;; once dired is available, load the package.
      ;; Since dired+ is no longer available on melpa, use quelpa,
      ;; but avoid checking for updates on every load.
      (if (package-installed-p 'dired+)
          (use-package dired+
              :after dired
              :init (funcall _init)
              :config (funcall _conf)
          )
          (use-package dired+
              :after dired
              :quelpa (dired+ :fetcher github :repo "emacsmirror/dired-plus")
              :init (funcall _init)
              :config (funcall _conf)
          )
      )
  )
#+END_SRC

** Helm
The CtrlP of Emacs, only waaaay better.
#+BEGIN_SRC emacs-lisp
  (use-package helm
      :ensure t
      :commands helm-mode
      :delight helm-mode
      :init
          (add-hook 'after-init-hook (lambda ()
              (ido-mode -1); Disable the "I Do" mode, we have helm for that now.
              (helm-mode 1)
          ))
          (add-hook 'evil-leader-mode-hook (lambda ()
              (evil-leader/set-key "DEL" 'helm-mini)
              (evil-leader/set-key "SPC" 'helm-M-x)
          ))
      :config
          (require 'helm-config); load defaults
          (define-key global-map (kbd "M-d") 'helm-imenu-in-all-buffers)
          (global-set-key (kbd "C-x c a") nil); The original helm-apropos binding
          (global-set-key (kbd "C-h C-h") nil); The emacs help for help
          (global-set-key (kbd "C-h C-h") 'helm-apropos)
          (global-set-key (kbd "C-f") 'helm-do-ag)
          ;; Map the dynamic kill-ring
          (global-set-key (kbd "C-x c M-y") nil); The original helm-show-kill-ring
          (global-set-key (kbd "M-v") 'helm-show-kill-ring); The scroll-down-command
          (setq
              helm-candidate-number-limit 100
              helm-mode-fuzzy-match t
              helm-completion-in-region-fuzzy-match t
              helm-autoresize-mode t
              helm-buffer-max-length 50
              helm-follow-mode-persistent t
              ;; Try to update faster when hitting RET too quickly
              helm-idle-delay 0.0
              helm-input-idle-delay 0.0
              helm-yas-display-key-on-candidate t
              helm-quick-update t
              helm-M-x-requires-pattern nil
              helm-ff-skip-boring-files t
          )
  )
#+END_SRC

# ;; (require 'elpa-neotree)
# ;; (require 'elpa-helm)
# ;; (require 'elpa-projectile)
# ;; (require 'elpa-origami)
# ;; (require 'elpa-ace-window)
