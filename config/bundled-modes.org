#+TITLE: Bundled modes

*** Help buffers
These are the buffers that appear when browsing the Emacs help.
#+BEGIN_SRC emacs-lisp
  (use-package help
      :commands help-mode
      :config
          (setq help-window-select t); whenever the help buffer appears, select it.
  )
#+END_SRC

*** Server
Allows you to run the instance of Emacs as a server, so EmacsClient can connect without
having to reload the init file. *Right now I have it disabled.*
#+BEGIN_SRC emacs-lisp
  (use-package server
      :demand t
      :disabled
      :init
          (add-hook 'after-init-hook (lambda ()
              (unless (server-running-p) (server-start))
          ))
  )
#+END_SRC

*** Programming Mode
Editor major mode which englobes all programming languages.
#+BEGIN_SRC emacs-lisp
(use-package prog-mode
    :commands prog-mode
    :config
        ;; Normally prettify-symbols makes a good work replacing symbols, sadly,
        ;; this breaks the ligature functionallity of fonts that have it (like Fira Code).
        ;; instead, disable it and setup ligatures manually.
        (global-prettify-symbols-mode 0)
        (let
            ((alist '(
                (33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                (36 . ".\\(?:>\\)")
                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                (48 . ".\\(?:x[a-zA-Z]\\)")
                (58 . ".\\(?:::\\|[:=]\\)")
                (59 . ".\\(?:;;\\|;\\)")
                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                (91 . ".\\(?:]\\)")
                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                (94 . ".\\(?:=\\)")
                (119 . ".\\(?:ww\\)")
                (123 . ".\\(?:-\\)")
                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
            )))
            (dolist
                (char-regexp alist)
                (set-char-table-range composition-function-table
                    (car char-regexp)
                    `([,(cdr char-regexp) 0 font-shape-gstring])
                )
            )
        )
)
#+END_SRC

